{"version":3,"file":"static/js/387.3ca33a43.chunk.js","mappings":"iQAEaA,E,OAAaC,GAAAA,GAAH,iE,SCIR,SAASC,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE4BC,EAAAA,EAAAA,IAAkBN,GAF9C,OAEUO,EAFV,OAGIH,EAAWG,GAHf,gDAKIC,QAAQC,IAAI,aAAZ,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACV,KAGF,yBACIG,EAAQQ,QAGR,SAACd,EAAD,UACGM,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EADE,OAHf,qEAaP,C,+LC/BM,SAAeG,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAA,uBADlB,cACCC,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,uFACkBL,EAAAA,EAAAA,IAAA,8BAAiCK,IADnD,cACCJ,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA8BV,GAA9B,uFACkBI,EAAAA,EAAAA,IAAA,iBAAoBJ,IADtC,cACCK,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BX,GAA9B,yFACkBI,EAAAA,EAAAA,IAAA,iBAAoBJ,EAApB,aADlB,cACCK,EADD,OAECO,EAAOP,EAASC,KAAKM,KAFtB,kBAGEA,GAHF,kEAMA,SAAenB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCO,GAAjC,yFACkBI,EAAAA,EAAAA,IAAA,iBAAoBJ,EAApB,aADlB,cACCK,EADD,OAECO,EAAOP,EAASC,KAAKC,QAFtB,kBAGEK,GAHF,kEA1BPR,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBS,QAAS,mC","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/themoviedbApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  list-style: none;\n  padding: 0 20px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchMovieReviews } from 'services/themoviedbApi';\nimport { ReviewList } from './Reviews.styled';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    async function getMovieReviews() {\n      try {\n        const movieCast = await fetchMovieReviews(movieId);\n        setReviews(movieCast);\n      } catch (error) {\n        console.log('error :>> ', error);\n      }\n    }\n    getMovieReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      {!reviews.length ? (\n        <p>We don`t have any reviews for this movie</p>\n      ) : (\n        <ReviewList>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ReviewList>\n      )}\n    </div>\n  );\n}\n\nReviews.propTypes = {\n  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: 'e55542ecb6aab3d889d16953eac82937',\n};\n\nexport async function fetchTrending() {\n  const response = await axios.get(`/trending/movie/day`);\n  return response.data.results;\n}\n\nexport async function fetchMovieByName(query) {\n  const response = await axios.get(`/search/movie?query=${query}`);\n  return response.data.results;\n}\n\nexport async function fetchMovieById(id) {\n  const response = await axios.get(`/movie/${id}`);\n  return response.data;\n}\n\nexport async function fetchMovieCast(id) {\n  const response = await axios.get(`/movie/${id}/credits`);\n  const cast = response.data.cast;\n  return cast;\n}\n\nexport async function fetchMovieReviews(id) {\n  const response = await axios.get(`/movie/${id}/reviews`);\n  const cast = response.data.results;\n  return cast;\n}\n"],"names":["ReviewList","styled","Reviews","movieId","useParams","useState","reviews","setReviews","useEffect","fetchMovieReviews","movieCast","console","log","getMovieReviews","length","map","id","author","content","fetchTrending","axios","response","data","results","fetchMovieByName","query","fetchMovieById","fetchMovieCast","cast","api_key"],"sourceRoot":""}